

                           tonkonog@bellsouth.net
                                305-519-5177

    • 15 + years’ experience as a Programmer, Solution Architect, Enterprise
      Architect, and SOA Architect across .Net and Java technologies.


    •  Have led many complex projects involving integration and migration as
      a “hands on” resource.


    • Have worked on systems that Monitor Medical Devices and provide
      notifications.


    • Have provided cloud-based IOT/Device Monitoring solutions.


    • Have implemented Artificial Intelligence (AI) Applications via
      Microsoft CNTK, Azure Cognitive Services, Azure ML Studio, and GOFAI.


    • Have implemented and architected mobile device solutions on various
      platforms (Xamarin, XCode, Android Studio).


    • Have developed RPA Applications via Automation Everywhere.


    • Have delivered secure applications, inclusive of Encryption,
      Tokenization, and PCI Compliance.


    • Have delivered solutions across diverse industries, inclusive of the
      financial and credit card domains.

    • Have performed architectural and development services on all levels
      (Database, Middle Tier, Web, Desktop)


    • Have developed Big Data Solutions Inclusive of Machine Learning


    • Have considerable experience with MVC, JavaScript, and JavaScript
      libraries.


    • Have considerable experience with many SDLC Methodologies, including
      SCRUM, Extreme Programming, RUP, and Waterfall.


    • Build & Source Control Management & Administration


    • Documentation: Solution Documents, Governance Models, Enterprise
      Blueprints/Roadmaps/Transition Plans, Requirements Documents
      (functional and non-functional), and Reference Architectures.


    • Developed API’s, Virtual Data Layers, Publish/Subscribe and other
      Enterprise Frameworks.


    • Have provided services to Fortune 500’s across diverse industries.


    • Have worked with startups.



                                 Experience


2/2016- Enterprise Azure &.NET Architect—Carnival Cruise Lines:
Present Position Involves Enterprise Architecture and Hands-On Coding

        Azure
            • Azure Active Directory
            • ARM Templates
            • Application Gateway & WAF
            • Azure ML Studio
            • Azure Cognitive Services
            •  Cli 2.0, PowerShell
            • Azure Storage
            • Cosmos DB
            • Azure Event Hub
            • Data Lakes
            • Azure Service Fabric
            • Azure Functions
            • Azure Logic Apps
            • Azure Durable Functions
            • Azure Service Bus (Relay, Queuing, and Eventing--Pub/Sub)
            • Load Balancing
            • Azure Event Hub (IOT/Device Monitoring)
            • Azure Event Grid
            • Azure OMS


        Web UI: Designed and developed solutions based on ASP.NET MVC &
Core,   ASP.NET Web Forms, and Single Page Applications. Design Patterns
implemented     include MVC, MVP (Web Forms), and Repository. Ancillary
technologies include    CSS, HTML 5, and JavaScript, and Telerik Kendo UI.

        Web Services: Designed/implemented and integrated Enterprise Web
Services via    WCF (inclusive of services exposing both SOAP and REST
Endpoints       simultaneously) and ASP.NET Web Api 2 REST Services.

        WPF: Designed/developed/integrated WPF Applications implementing
the MVVM        Design Pattern, in the context of transitioning Windows
Forms applications.

        Utilized UML and its 4 + 1 View to Model complete, End to End
Solutions: UML  Diagrams used include, Class, Sequence (use case
realizations), Activity (Business       Process Modeling), State,
Deployment, Object, Component (illustrating     dependencies), and Use
Case. Classic Views included: Logical, Process,         Implementation,
Deployment, and Use Case.

        Designed, Developed, and integrated an Enterprise Eventing
Framework: is being     used to Monetize Customer Event Streams, provide
Enterprise Error Handling, support      a Real-Time Enterprise Cache, and
for the implementation of Root Cause Analysis.

        Designed/Integrated an Enterprise Cache: Cache is real-time and is
supported by    the event processing framework described previously.

        Designed/Developed and Integrated an Enterprise Data Access Layer:
Provides        universal data access to both structured and unstructured
repositories, either on-        premise or in the cloud. Implements the
Abstract Factory Pattern and works in tandem    with the Enterprise
Eventing Framework described previously.

        Big Data: Implemented Predictive Analytics Solutions via Azure AI
Studio  (Supervised and Unsupervised ML). Also Designed/Developed and
Integrated a    custom, big data solution providing "Hub of Hubs"
functionality that integrated   Hadoop and other repositories (both
structured and unstructured).

        Source Control: Implemented Branching Strategies, Build Scripts,
Gated Check-Ins,        ALM Templates, and General Administration.

        DevOps Implementation: Inclusive of Continuous Planning, Continuous
Integration,    Continuous Testing, Continuous Deployment, and Continuous
Feedback and    Monitoring.

        Design, Creation, and integration of UWP Applications targeting
multiple        “Device Families.”

        Designed/Developed and Integrated Mobile Solutions via Xamarin.




9/2012- SOA Architect—Ryder Systems:
2/2016  Position involves the creation of an Enterprise Wide, Service
        Oriented Architecture.

        Ancillary Tasks include Presentations to Stakeholders; Integration
        with the “Appian” BPM Tool; Server Configurations; Mobility
        Applications; Team Foundation Server (TFS) Administration and
        Development, including ALM Templates, Builds and Deployment,
        inclusive of Micro Services, and Development of Branching and
        Versioning Strategies; Mentoring of Junior and Senior Developers;
        and the Programming (coding) of Key Architectural and Related
        Components.

        Background: Ryder Systems is a Major Transportation Company
        (Fortune 500) specializing in Commercial Truck Rental, Fleet
        Management, and Supply Chain Solutions. However, based on culture,
        funding models, and a lack of central oversight, the code related to
        existing applications and new initiatives is isolated (siloed) from
        the rest of the domain, resulting in duplicity and inefficiency.

        My primary role is to increase profits through a centralized
        framework (SOA), that reduces costs and time to market by enabling
        access, reuse, and ease of extensibility of both new and siloed
        enterprise assets. The details follow below:


        Accomplishments:


        Azure: Worked with Azure in a Hybrid Cloud context: Service hosting
        and related tasks are being migrated to Azure according to a
        “Transition Plan.” The transition is being facilitated by Azure
        Service Bus Relay which directs service requests to the appropriate
        handler (WCF) in the cloud or on premise. Azure BizTalk Services are
        also part of the mix. Other Azure Tasks include the development of
        ARM Templates, Azure Active Directory, Azure Application Gateway &
        WAF,  Azure Storage (Blob & Table) and SQL Server.


        Micros-Services: developed granular micro-services, targeting E-
        Commerce, as part of the general service inventory. Each Micro-
        Service runs in its own Application Domain (Application in IIS) and
        each Micro-Service has its own Application Pool and data-source.


        .Net Core: Implemented via VS 2015, including use of Linux and
        Windows Docker Containers.


        Created Core Infrastructures via the ESB & Orchestration Design
        Patterns: For synchronous business processes, I implemented the
        Orchestration Design Pattern. This pattern exposes a central layer
        of services that contain “Business Process Logic.”  It typically
        works by leveraging middleware (in the instant case, Appian and
        Windows Workflow Foundation for SOAP Services, BizTalk Server for
        Restful Services), where each step of a business process defined
        within an Orchestration Service is realized via the execution of a
        reusable component/service. In this way, new applications can be
        “assembled” via existing assets, rather than developed from
        “scratch.” For Asynchronous messaging patterns between disparate
        systems with uncertain availability, and potentially the need for
        translation of protocols/data models, I am implementing the ESB
        Design Pattern. Here, the steps required to translate received
        messages into a format and/or protocol required by the recipient are
        defined via an “Itinerary.”  To facilitate the implementation of the
        pattern, I am using the BizTalk ESB Toolkit and MSMQ (Microsoft
        Message Queing) and using OSB—Oracle Service Bus—for supply chain).


        Implemented the “Three Layer Inventory Pattern:” This pattern
        complements Orchestration via 2 additional layers: A Business
        Services Layer, where the Services encapsulate business logic
        related to the entities they represent (e.g. customer, invoice,
        vehicle, etc.), and an Application Services Layer where the Services
        are typically devoid of business rules, but have highly reusable
        application logic (e.g. a Logging Service, Email Service, Data
        Access Service, etc.—this layer also includes “Wrapper Services”
        that enable integration with legacy and third party applications).
        The purpose of the pattern is to optimize reuse (Micro Service
        Strategy).


        Created Criteria for Integration of Appian BPM and SOA
        Orchestrations.


        Creating an Enterprise Ontology: Acts as a resource for enabling SOA
        Automation of Business Models and the discovery of Data Transfer
        Objects and Entity Centric Business Services.


        Introduced a SOA Delivery Strategy: Inclusive of  SDLC Options such
        as Waterfall, RUP, and Agile. One major purpose of the strategy is
        to ensure automation of Enterprise Business Models. The strategy
        encapsulates the essentials of the IBM SOMA paradigm.


        Implemented a Flexible and Extensible Security Model: inclusive of
        message security, transport security, and Single Sign On (SAML,
        OAUTH, OpenIDConnect & Custom).


        Compiled a SOA Governance Reference Model: Acts as a template for a
        SOA Governance Model, unique to the target organization. Includes
        Portfolio Governance and Portfolio Rationalization, Organizational
        Governance, Vitality Governance, and Lifecycle Governance.


        Created a Ryder SOA Reference Architecture and Implementation:
        Asserts standards , including examples, for development. The
        reference is organized according to the UML 4-1 View of an
        architecture.


        Created a SOA Transition Plan: Itemizes the initial state, desired
        state, and intermediate states of the target being transformed. It
        also includes an Impact Analysis, Gap Analysis, and integration with
        a Centralized Security Model.


        Created/Coded a Virtual Data Layer: As per a previous assignment,
        accomplished this via a combination of the Table Gateway and
        Abstract Factory Patterns. The basis for the Virtual Data Layer is
        to enable Database Federation (an integration strategy where
        multiple autonomous databases appear to act as one—differences in
        Data Models with respect to like entities are being resolved via a
        “canonical schema” in the Data Transfer Objects.


        Implemented/Coded a Publish/Subscribe Framework (Enables SOA 2.0,
        Complex Event Driven Architectures): As per the previous assignment,
        the framework is multithreaded and highly scalable. It decouples the
        event publishers from the event subscribers so that it possible to
        subscribe to an event without knowledge of the publisher (and vice
        versa). A major purpose is to enable SOA 2.0 processing (SOA 2.0
        monitors low level events that have an effect on the profitability
        or efficiency of an enterprise. When such an event is triggered, it
        is forwarded to a subscriber that takes the appropriate action(s) to
        optimize profits).


        Implemented the Canonical Schema Pattern: Enables greater reuse of
        services: While data models for enterprise entities may vary, a
        canonical schema at the SOA level presents one version of an entity
        (Data Transfer Object) that accommodates all data models within the
        enterprise.


        Created an Enterprise, Real-Time Cache: Leveraged Windows Server
        AppFabric to create cache clusters with high capacities and
        availability. Leveraged the Pub/Sub Framework (described previously)
        and Canonical schemas so Cache was always up-to-date and cached
        objects were shareable by multiple applications.


        Implemented the Data Transfer Object Pattern: This pattern improves
        performance by enabling Coarse Grained Interfaces that reduce the
        number of Remote Method Calls required to realize a business task.


        Created/Creating UML Analysis and Design Artifacts: Inclusive of Use
        Cases, Analysis Class Diagrams (including Domain Model/Ontology),
        Sequence Diagrams (including Use Case Realizations), Activity
        Diagrams, Component Diagrams, Deployment Diagrams, Class Diagrams
        (including Active Classes—Process View), and others in support of
        the classic UML 4-1 View of an Architecture.


        Data Modeling: OLTP, OLAP, MDM, Big Data (Hadoop)


        Developed Integration Strategies for Mobility, Legacy and Third
        Party Assets: Based on Wrapper Services in Orchestrations,  an ESB
        strategy for disparate systems, or a combination of both,
        particularly within Supply Chain Scenarios.


        Proposed a Database Transition Plan from a Federated Set of
        Databases to a One Source Repository: Strategy is based on a
        Canonical Schema derived at the application level. Common Attributes
        of an Entity define the Parent, while sets of attributes that are
        aggregated at the application level and that extend the entity so
        that it is consistent with differing data models become Category
        Entities in Logical DB parlance.


        Coded Windows Communication Foundation (WCF) and Workflow Services,
        inclusive of externalized rules and Java Integration.


        Coded/Developed Restful Services via ASP.NET Web API


        Coded/Created BizTalk Orchestrations, Itineraries (ESB Toolkit), and
        ancillaries –including Business Rules Engine (BRE).


        Coded Components implementing Multi-Threading: For the most part, I
        utilized the Microsoft Task Parallel Library.


        Coded/Developed Micro Services


        Made/Making Presentations to Diverse Audiences: Business
        Stakeholders, Project Managers, Business Analysts, Third Party
        Vendors, Developers, etc.


        Acted as Mentor to Both Junior and Senior Developers: e.g. WCF, WF
        (Windows Workflow Foundation), C#, VB.Net ASP.Net, ASP.Net MVC 4.0,
        ASP.Net Web API, jQuery, Unity, HTML 5, Multi-Threading,
        troubleshooting/debugging, etc.


        Cloud Integration: Azure--IAAS, PAAS, XAAS, SAAS-- WCF Services,
        BizTalk Services, and SQL database.


        Mobile Device Integration: Includes prototyping via Xamarin
        (Android, IOS, and Windows Phone) Studio and Enterprise Integration
        via Restful Services.


        Designing/Developing Mobile App Store Infrastructure: Mobile Device
        Downloads.


        Mainframe Integration: Host Integration Server & SOA Wrapper
        Services


        Configured Development, QA, and Production Servers: Windows Server
        2012, Inclusive of IIS and WSAT Protocol.


        Implemented Tests: Unit, Integration, and Load. Also provided
        automation Web Application Testing via Selenium Web Driver.


        Implemented Dependency Injection via IOC Containers


        Acting as TFS Administrator and Developer: Inclusive of
        installation, creation of Project Collections, Team Projects, ALM
        Templates CMMI and SCRUM, Automated Builds and Deployments,
        Branching and Versioning Strategies, Continuous Integration,
        Development and Integration of  Automated Tests.




        Summary of Technologies: Visual Studio 2012,
        2013,2015—Enterprise,Ultimate, Premium, Professional , and Test
        Versions; SQL Server 2012,  Oracle(PL SQL) and ODP,  Windows Server
        2012, Windows Server AppFabric, Windows Azure, Redis Cache,
        SharePoint Server 2013, WCF, WF (xamlx), WPF(xaml) , ASP.Net (Web
        Forms, MVC 4.0, JSON, AJAX, JQuery, AngularJS, Knockout.js, Web
        API), ASP.NET Web API, BizTalk Server & ESB Toolkit, Oracle SOA
        Suite & Oracle Service Bus (OSB) SharePoint,  MSMQ, MQ Series
        (Websphere MQ) AS400, DB2, AS 400, DataPower, Oracle, Team
        Foundation Server 2012, Xamarin Studio (Mobile Applications), Unity
        (IOC), C#, VB.Net, .NET Frameworks 4.0 and 4.5, PowerShell
        Scripting, Filenet CMS, OWASP, SOLR, TIBCO, Power BI., Google
        Visualization tools.


        Summary of Design Patterns Implemented: Orchestration, Three Layer
        Inventory, ESB, Data Transfer Object, Canonical Schema,
        Publish/Subscribe, Abstract Factory,  Data Federation, Table
        Gateway, Strategy (contexts, algorithms), MVC, MVVM.





3/2011- SOA, .Net Architect—Ernst & Young:
8/2012  Employing the latest .Net Technologies, position involves the
complete design of a
        Service Oriented Architecture, inclusive of the prototyping of key
components
        and the interfacing with and mentoring of onshore and offshore teams


        Background: Ernst & Young is one of the “Big 4” accounting firms. As
such, it
        maintains a competitive tax practice serving a diverse, global
        clientele having a variety of business structures. In particular, my
        role was to design an architecture that would fully support their
        Partnership Tax Practice and have the capability to perform complex
        calculations on millions of assets. Additionally, the architecture
        was required to integrate their existing partnership applications,
        provide the ability to perform “What If” calculations over large
        sets of data, enable the printing of tax forms, along with other
        relevant tasks, including the potential support for database
        federation. The details follow below:


        Accomplishments:


        Created Basic infrastructure via the “Orchestration Design Pattern”--
         The pattern works by treating requests as business processes. Steps
        within a business process are handled via a core of highly reusable
        services, discovered through a Service Oriented Analysis. Reuse is
        achieved by isolating different types of logic into distinct layers
        (i.e. Orchestration Services Layer, Business Services Layer, and an
        Application Services Layer).


        Created an “Ontology,” based on the Tax Practice—This was
        accomplished by creating a UML Domain Model (Analysis Class
        Diagram), expressing the Tax Practice Business Vocabulary as
        classes, and showing the relationships between the classes. The
        Ontology/Domain Model was used for the discovery of Entity Centric
        Business Services and Data Transfer Objects.


        Aligned the relevant Business Models to the Ontology: This process
        facilitated SOA Automation for the targeted Business Models.


        Implemented/Coded a “Virtual Data Layer”—Accomplished this via a
        combination of the Table Gateway and Factory Method Patterns. The
        basis for the Virtual Data Layer is to enable Database Federation
        (an integration strategy where multiple autonomous databases appear
        to act as one—differences in Data Models with respect to like
        entities are being resolved via a “canonical schema” in the Data
        Transfer Objects.


        Implemented/Coded a Publish-Subscribe Framework (Enables SOA 2.0,
        Complex Event Driven Architecture)--The framework is multithreaded
        and highly scalable. It decouples the event publishers from the
        event subscribers so that it possible to subscribe to an event
        without knowledge of the publisher (and vice versa). Its main
        purpose is to enable SOA 2.0 processing (SOA 2.0 monitors low level
        events that have an effect on the profitability or efficiency of an
        enterprise. When such an event is triggered, it is forwarded to a
        subscriber that takes the appropriate action(s) to optimize
        profits.)


        Implementing/coding a Chunking and Streaming Framework—Purpose is to
        prevent breaches of the hardware limits and to improve performance
        when performing complex calculations over huge sets of data. A
        chunking strategy delivers manageable subsets of data for processing
        (each subset is processed, one subset at a time, until all the data
        is processed). Streaming relates to the fact that data is normally
        buffered over the wire with Web Services. This means that all the
        data needs to arrive before any processing can be done. With large
        chunks this causes a performance hit. My framework avoids this
        through custom streaming classes so that the streamed data can be
        processed immediately, without waiting for the entire chunk to
        arrive.


        Implementation of Database Designs—Includes design of both
        Transactional and Dimensional Databases. Transactional model was
        delivered in third normal form.


        Integrated key legacy and third party applications—Utilized Database
        Federation, described above and “Wrapper Application Services.”
        These types of services provide a Wrapper around legacy or third
        party applications so that their functionality can be exposed via
        Web Services. Under the hood, they utilize the appropriate
        technologies to communicate with the “Wrapped” applications (e.g.
        COM interop, WSE, etc).


        Introduced a SOA Governance Reference Model—Due to the complexity of
        an Enterprise SOA, Governance is essential. Key parts of the
        Governance Reference Model are being implemented for the Tax
        Practice.


        Creating a SOA Reference Architecture—inclusive of a reference
        implementation. This artifact maintains Architectural Integrity by
        providing guidance for development. I organized it according to the
        classic UML 4-1 View of an architecture.


        Acted as  Technical  Lead  for  Onshore  &  Offshore  Resources—This
        involved prototyping and formal presentations.




        Technologies:


        Windows Workflow Foundation (WF) 4.0 Workflow Services: Used in  the
        Orchestration Services Layer, they implement the Business  Processes
        of the application as Workflows. For volatile process  logic  (based
        on the volatility of certain tax laws and algorithms),  an  external
        rules  file  is  being  used  so  that  the  rules  can  be  changed
        externally,  without  the  need  to  recompile  and   redeploy   the
        application.


        Windows Communication Foundation 4.0 (WCF): Services  have  multiple
        endpoints to accommodate a variety of clients. Use is also  made  of
        WCF Instance
        Management,   Operation    Management,    Concurrency    Management,
        Transaction
        Management and Security where appropriate.


        BizTalk  Server  (ESB  Toolkit):  used  to  facilitate  asynchronous
        communication between disparate  systems  with  potentially  unknown
        availability (protocol/data translation,  data  enrichment,  dynamic
        routing, queuing, etc). Rest  Services:  exposed  Restful  Endpoints
        utilizing  webHttpBinding.  Both  Service   Behaviors   and   Custom
        Pipelines were prototyped for converting JSON to XML within  BizTalk
        Orchestrations. Through BizTalk Adapters,  integration  was  enabled
        with SAP, Seibel, and PeopleSoft.
        Microsoft Azure: IAAS, PAAS, XAAS, SAAS-- WCF Services, BizTalk
        Services, and SQL database.




        .Net Task Parallel Library: Facilitates and optimizes Multithreading
        via ParallelFor, ParallelForeach, Parallel.Invoke and Task
        constructs (all of which are utilized in the application). It
        provides the most efficient way on the Microsoft Stack to utilize
        CPU cores. ParallelFor and ParallelForEach loops are being used to
        facilitate calculations on large sets of independent assets and
        Parallel.Invoke constructs are being used to execute multiple Tasks
        in Parallel.


        Team Foundation Server 4.0 (TFS): Features used include
        Source/Version Control, Work Item Tracking, and Team Build.


        SQL Server 2008 R2:  Including  SSAS  (Dimensional  Database),  SSRS
        (Reporting),  and SSIS (Integration Services).


        ADO.Net  4.0:  In  particular,  ADO.NET  DataReaders  are  used  for
        streaming and performance intensive operations. The Entity Framework
        in non-performance critical scenarios.


        System.Runtime.Caching: This namespace is completely decoupled  from
        ASP.Net. Use is being made of Caching and  Cache  Dependencies  (SQL
        and File—they cause a flush of the cache when the underlying  source
        changes.


        Unity IOC


        Visual Studio 2010








10/2007-        SOA, .Net Architect and Team Lead—Philips Electronics
        (health care services)
02/2011 10/2007- Present--SOA, .Net Architect and Team Lead—Major Medical
        Service
        Company

        Assignment involves architectural design and heavy, multi-threaded
        coding in migrating company’s product from a legacy platform, based
        on C++, to a loosely
        coupled, multi-layered Service Oriented Architecture (SOA) via the
        .Net
        Framework, version 3.5 (C#, WCF, and WF), with the further
        constraint that the application support HL7/HIPPA compliant
        customers.

        Architecture has the classic 3 layers of an SOA, including an
        Orchestration Layer, an Entity Centric Business Services Layer, and
        an
        Application Services Layer exposing legacy portions of the original
        application, and containing reusable components devoid of business
        logic.
        Services were discovered via a Service Oriented Analysis, with the
        aid of
        a UML Domain Model that I constructed.

        Prototyped Orchestrations powered  by  BizTalk  2009  (use  made  of
        BizTalk Editor, Mapper, Orchestrations, Business Rules Engine (BRE),
        BizTalk Adapters, and parallel processing within Orchestrations) and
        Windows Workflow
        Foundation (WF) .  Note that BizTalk Adapters were used to integrate
        with SAP, Seibel, and PeopleSoft.


        Windows Communication Foundation (WCF) is being used to create the
        Business and Application Services, and some of the services have
        multiple
        “End Points.” This makes it possible to access the services through
        different protocols. Additionally, use is being made of WCF Instance

        Management, Operation Management, Concurrency Management,
        Transaction
        Management and Security where appropriate.  Note that a Wrapper
        Application Service was used to integrate SalesForce.com.

        Coded key parts of the application: Including multi-threaded
        portions utilizing .NET synchronization objects, including Mutexes,
        Monitors, Manual and AutoResetEvents,  Locks, and Semaphores

        Established SOA Governance Workflow, including
        a) Establishment of a SOA Governance Toolkit to enable the
           assessment of the existing governance model.
        b) Determination of the enterprise governance requirements for SOA.
        c) Designed the appropriate SOA governance model for the enterprise.

        Created a Transition Plan including:
        a) An impact Analysis
        b) The definition of Transition Architectures
        c) Design of a centralized Security Model

        Created Automated Tests, via the Test Feature of Visual Studio.

        Summary of Technologies: Windows Communication Foundation (WCF),
        BizTalk 2009, Windows Workflow Foundation (WF), SQL Server 2005,
        Linq to Objects, and Visual Studio 2005, Agile/SCRUM.


1/2007- SOA, .Net Architect and Technical Lead—Owens & Minor/ADS:
10/2007 Acted as .Net Architect and Technical Lead/Mentor for onshore
        and offshore development resources (India). Specifics include:

        The complete multi-tiered Architecture/Design (SOA/Web
        Services/BizTalk)
        of CRM and Automated Order Processing application via UML and the
        Unified
        Process. Design was implemented via.NET technologies and had 4
        Layers: A
        UI Layer based on Windows Forms (Win Forms) deployed via .Net "Click

        Once" Technology, an Orchestration Services Layer, a Business
        Services
        Layer, and an Application Services Layer, including a Data Access
        Tier,
        and a Data Layer comprised of SQL Server 2005 and Pervasive
        Databases.
        Architecture package was technology agnostic in that Web Services
        returned "types," consumable by any UI Technology, and the Data
        Access
        Tier was designed to work with any database vendor (.Net Reflection
        Classes were used to facilitate this).


        Used BizTalk 2006 R2 to power the Orchestration  Services  Layer  of
        the SOA (Business Processes were modeled as  BizTalk  Orchestrations
        and  exposed  as  Web  Services  and  Orchestrations  consumed   Web
        Services. Used BAM Services to monitor business activities and  used
        HAT for debugging Orchestrations.  Additionally,  use  was  made  of
        Business  Rules  Engine  (BRE)  to  control   Orchestration   Flow).
        Mainframe  integration  was  involved.  BizTalk   Adapters   enabled
        integration with SAP, Seibel, and PeopleSoft.


        Used .Net Interfaces to define "pluggable" Enterprise Components
        that
        were stored in the Global Assembly Cache (GAC) and accessible by
        many
        applications. Access to the Enterprise Components was via .Net
        Remoting.
        In this context, "Delayed Signing" of the assemblies was used to
        facilitate development.


        The design of the appropriate SOA governance model for the
        enterprise, and the creation of a Transition Plan.


        Created Database Designs for OLTP/Relational Databases and
        OLAP/Dimensional Databases: OLTP Design: Included Conceptual,
        Logical, and Physical DB Models. OLAP Design based on Snowflake
        Schema.


        Created Automated Tests, via the Test Feature of Visual Studio.

        Role was also was responsible for the coding of key parts of the
        application, including the Data-Tier, Parts of the Business Services

        Tier, and the Enterprise Components.

        Detail about UML and the Unified Process (RUP): 8 iterations were
        defined
        having the standard workflows (Analysis, Design, Implementation, and

        Testing). Functional requirements were captured in Use Cases and Use
        Case
        Realizations were used to verify the design classes versus the
        requirements. Artifacts created include: Use Cases, Analysis Class
        Diagrams (Domain Model), Design Class diagrams, Activity Diagrams,
        Sequence Diagrams, and Deployment Diagrams.

        Additional contributions: Designed and Developed Custom, Role Based
        Authorization Model in which Roles were defined via an
        administrative
        front end and then attached to users. Did Total Cost of Ownership
        analysis vs. BizTalk and other integration strategies. Also,
        prototyped
        authentication model which involved Active Directory, Web Service
        Authentication via Kerberos (Network Credential Object Passed to
        Proxy of
        Web Service), and Certificate Authentication between Web Servers.

        Summary of Technologies: Web Services, ASP.NET, AJAX & javaScript,
        SQL Server 2005, BizTalk Server 2006 R2, Windows Forms, UML, Visio,
        GAC/Shared Assemblies, .Net Remoting, Visual Studio 2005, Visual
        Source Safe 2005, Active Directory, Smart Client/Click Once
        Technology.

3/2006- .Net Architect (3/2006-1/2007)--Motorola:
1/2007  Employing the latest .Net Technologies , position involves
        Design/Development and the interfacing with Offshore Resources
        (Penang China).

        Summary of Technologies: Windows Presentation Foundation (WPF),
        Windows Communication Foundation (WCF), Visual Studio 2005 Team
        Edition, Test Driven Development (TDD), UML, ASP.NET, ASP.NET AJAX,
        SQL Server 2005, Rational Clear Case, TFS, Visio

        Background: Company makes "High-End," sophisticated Radios for
        Government and Industry. Based on the next generation of Radios to
        be introduced, client needed an application enabling
        their programmability via end users. My role in the process was
        multifold: 1) to analyze the existing application and propose a new
        architecture that would support an aggressive set of new features,
        2) to implement a prototype managing various "constraints" between
        User Settings within the application, 3) and to work with the
        Platform Team to design an "Unpacking" algorithm of the Radios'
        "Code Plugs." The latest Microsoft Technologies were utilized (e.g.
        Windows Presentation Foundation (WPF), Windows Communication
        Foundation (WCF), etc). C# was used as the development language.
 
        More specifically, I used UML to develop a "Domain Model" for the
        application and refined the portions of it related to the Constraint
        Management and the Platform Unpacking algorithm.
 
        I Prototyped a constraint mechanism that made it possible to change
        the rules of logic governing the constraints from an administrative
        front end. The distinction was, within the prototype, that the rules
        were completely decoupled from the application, so that the rules
        could change without having to recompile the application--similar
        functionality to the "Rules Repository" implemented in Microsoft
        BizTalk versions 2004 upwards.

        Additionally, I developed a management UI for the Prototype, via
WPF.
 
        Worked with Offshore resources (Chengdo China) to enable the testing
        of the prototype vs. an alternative prototype.
 


11/2004-                Dot Net Architect/Programmer: United States Sugar
Corporation
2/2006  Contract involves development and Integration of Enterprise Class
       Web and Windows Applications:

       Technologies Employed in the Web Form Applications: ASP.NET;
       ADO.NET;  Transact SQL; Stored Procedures; SQL Server 2000, SQL
       Server 2000 Reporting Services; Web Services; Web Forms; A .NET
       “Class Library” Project, implementing the business and data access
       layers of a 4 tiered application; Visual Studio.NET, providing the
       fully integrated environment for development; and Visual SourceSafe.



       Technologies Employed in the Win Form Application: Visual Studio.NET
       Windows Application Project, Class Library Project (houses the
       business layer of 3 tiered application), Windows Service Project,
       Database Project, Deployment Project, SQL Server 2000, Transact SQL,
       Stored Procedures Database Triggers, Thread Synchronization Objects,
       Crystal Reports, and Visual SourceSafe.


       Integration was achieved between the applications by applying the
       principles of Service Orientation. In this context, I devised a
       Governance Model and Transition Plan.





8/2004- .NET Architect and Team Lead: Copy Acquisition Corp.
11/2004                 Same company that I completed a contract with 2
positions prior—they closed
        their Miami branch and contacted me for another contract, this time
       at their corporate office. Purpose of the assignment was to extend
       the application and act as trainer and mentor of the corporate staff
       assigned to the project.


6/2004- .NET Architect and Developer: Microsoft Corporation
8/2004  Currently acting as a .NET Architect and Developer for projects
        assigned to me by Microsoft Corp. Technologies include: .NET
        Framework (All aspects, including security, configuration, remoting,
        etc), Applications (WebForms, WinForms, Class Libraries,  etc),
        Servers (BizTalk Server, SQL Server 2000—including Reporting and
        Analysis Services, etc).

9/2003-  .NET Architect and Team Lead: Copy Acquisition Corp.
6/2004  Contract entails complete life cycle design and development of a
        complex, medical records application via UML, The Unified Process,
        and the .NET Framework.


        Specifics Include: Development of Conceptual Domain Model, via UML
        and Microsoft Visio; authoring of all Use Cases; the mapping of Use
        Cases to the .NET Framework via Sequence Diagrams and refinement of
        analysis classes contained in the Domain Model; the creation of a
        Logical Database Model (Visio); conversion of the Logical Database
        Model into an SQL Server 2000 Database; Visio Code Generation of
        Design Classes and incorporation of Classes into Visual Studio.NET;
        Training and Mentoring of Personnel Relative to the .NET Framework;
        C# Coding of Middle Tier Classes and;  VB.NET Coding of ASPX and
        “Code Behind” pages; implementation of ASP.NET Validation Controls,
        List Controls (DataGrid, DataList, Repeater, RadioList), Web User
        Controls, etc.; development of Regular Expressions to defend against
        Script and SQL Injection Hacker Attacks; implementation of ASP.NET
        Caching for the storage and retrieval of fairly static data,
        including automatic Cache refresh when source of cached data is
        changed; Implementation of SSL; Coding of “Payment Gateway” for E-
        Commerce (online credit card authorization); development of
        Parameterized Stored Procedures;  implementation of database
        integration and transactions via ADO.NET; Implementation of ASP.NET
        Forms Authentication; development of a custom, Role Based
        Authorization scheme involving the storage of User Roles in a .NET
        Generic Principal Object; Development of a fine-grained
        Authorization Administration Module itemizing objects on individual
        pages via .NET Reflection Classes; Creation and administration of
        Microsoft VisualSourceSafe Databases, including Build Version
        Control; Deployment of Application via XCOPY and MSI executables;
        Integration of Application with Legacy Systems (DTS Packages); and
        design of SQL Server Views for display via Active Reports.





3/2003- Web Architect/Developer: Stretch N’ Crunch.

7/2003  Contract involves the complete .NET architecture, development, and
        deployment of E-Commerce initiative to sell exercise equipment on
        the Internet. Specifics include: Development of Conceptual Domain
        Model, via UML; Creation of Visual Theme and Presentation for the
        initiative, based on Requirements and Artifacts supplied by the
        client; Implementation/coding of 3 tiered architecture to ensure
        maximum scalability (ASP.NET, via VB.NET, used for the Presentation
        Tier, C# Class Library used for the Business Tier, and Transact SQL
        used for stored procedures in the Data Tier); The use of Regular
        Expressions to defend against Script and SQL Injection hacker
        attacks; The development of User Controls to facilitate reuse of
        HTML Elements; the use of .NET Web Server Controls and .NET Data
        Binding; The use of the .NET Caching Object to store frequently
        used, but fairly static, data for binding purposes—use of Cache
        Dependency conditions so that Cache is refreshed when underlying
        data is changed; The complete development of a Shopping Cart and
        Payment Gateway; The configuration of IIS, Digital Certificate, and
        SSL (encrypts sensitive data); The complete development of Data
        Tier, including models, tables, constraints, stored procedures,
        etc.;  The development of a high performance ISAPI Extension
        (written in C++) to communicate data to Merchant Account Provider
        through Payment Gateway (Credit Card Authorizations/Debits); The
        setup and development of ASP.NET Forms Authentication for the
        maintenance part of the application; The coding of an Email, Middle
        Tier Class; The coding of Global.asax event handlers (use of
        Application_Error Event to catch unhandled exceptions in the
        application, then log them, and then send emails to designated
        parties, and the use of the Session_Start/Session_End events for
        transient data); The coding of both Client and Server-Side Form
        Validation to ensure Data Integrity; The development of a Deployment
        Executable (.msi file) to automate installation of the application
        on a remote server; and the configuration of .NET “config files.”



7/2002- Software Architect/Developer: PricewaterhouseCoopers.

1/15/03 Assignment involves software design and development for “Big 4”
        accounting firm as part of an elite team including Microsoft
        Consultants. Played a key role in analysis, design, implementation,
        and integration of major financial application dealing with the
        Sales Commission Process. Also played a significant role in the C#
        coding of middleware and Web Services integrating ERP applications’
        data with Client’s Sales Portal Software. Specific accomplishments
        include: Creation of Conceptual Domain Model for Sales Commission
        Application via UML and Microsoft Visio; Development of Use Cases
        from analysis artifacts; Mapping of Use Cases to design elements via
        Sequence Diagrams; Creation of Implementation Class Diagrams;
        Development of a comprehensive Activity Diagram, illustrating the
        flow of the Sales Commission Process; Coding of Presentation,
        Business, and Data Tier of Sales Commission Application via Smart
        Win Forms, ASP.NET, ADO.NET and SQL Server 2000—Specifics include:
        1) Implementation/development of  “aspx” and “Codebehind” pages
        employing various “Web Server Controls” (including “DataGrids,”
        Repeaters, “DropDowns,” etc.), 2) Development of ASP.NET “User
        Controls,” 3) Coding of Visual Basic.NET “Class Libraries” for the
        Middle Tier of the application,  4) Development/Coding of
        parameterized Stored Procedures employing Transaction Processing via
        Transact SQL, 5) Coding of Cross-Browser compatible versions for
        Mobile Devices via the .NET Framework,  5) Implementation of Global
        Transactions via ADO.NET,  6) Development of a DTS Package for the
        archival of data, and  7) Database modeling/development via SQL
        Server Enterprise Manager and Transact SQL Scripts.


        The development environment was integrated via Visual Studio.NET,
        and source control was effected via Visual SourceSafe.



5/2001- Software Architect/Developer: Eastman Kodak/Nexpress.
9/2001  Assignment involved software design and development for
        revolutionary digital printer.  Specifically, developed COM Objects
        to facilitate the transfer and filtration of printer data from
        printer to client’s data repository.  Used J++ for COM/Java/CORBA
        interop. Used UML and Rational Rose to architect software, and used
        C++ (ATL and MFC) to develop COM objects.  Part of the application
        called for transformation of raw data into XML documents and the
        programmatic parsing and validation of these documents using the
        Microsoft XML Component.  Removal of specified data (filtration) was
        accomplished programmatically via methods provided by the Microsoft
        DOM and XPATH Statements.  Front End of application was web based,
        and it was developed using ASP, HTML, and JavaScript.  Back End was
        realized via the creation of database devices, databases and tables
        (SQL Server) and the creation of MySQL and Oracle database tables
        (used SQL* Plus and PL/SQL to develop stored procedures for Oracle
        Databases). Programmatic access of database data was accomplished
        via ODBC through OLEDB (C++) and ADO (C++).  After transforming raw
        data into XML, application compressed and encrypted data for
        subsequent transmission.  Programmatic data transmission was
        accomplished from within COM objects via MSMQ, SMTP (attachment to
        Email) and FTP.  Source control was via Rational ClearCase.


3/2001- Technical Architect: The Hawke Group.
4/2001  Assignment entails the complete architecture of N-Tier Web Site
        Employing BizTalk, MSMQ, ASP, JavaScript, ActiveX Controls, DHTML,
        XML (DOM and SAX), XSLT, COM (C++ ATL), and COM+ from the
        Elaboration Phase through the Construction Phase, incorporating the
        use of UML and Erwin (implemented DB Model via Oracle—used PL/SQL to
        develop stored Procedures).  Project also required the establishment
        of “Branding Standards” to establish Market Equity. Specifics
        include the construction of the Domain (business) Model via class
        and Activity Diagrams, discovery of Use-Cases and Web Pages/DLL's
        from the Domain Model, creation of the Project Requirements
        Document, and consultation regarding the required supporting
        technologies.


12/2001-        Consultant: Signature Consultants.
3/2001   Accomplishments include the elimination of numerous bugs in Key
        Account's web site via line by line analysis of ASP, JavaScript, and
        DHTML code in a Visual SourceSafe environment; Using VB COM,
        developed 2 COM Objects: one that parsed data from a main frame then
        constructed an XML document for use in the client's Web Site and the
        other, which retrieved data from an SQL Server Data Base Table via
        an ADO Recordset then converted the recordset to XML for use in the
        client's web application.  Using ATL COM (C++), developed 2 Middle
        Tier ASP Components for credit card authorization (one for use on a
        web page and one for use by another COM+ Object); Developed an ISAPI
        Extension as an alternative option to CGI for sending Email; Coded
        ATL (C++) middle tier component employing OLEDB data access and
        return of heterogeneous data types via a "SAFEARRAY"--purpose of
        component is to receive a customer's name and email address and
        enter it into an SQL Server Database Table as passed (unless already
        there), then return, via separate indexes in array, first and last
        names, minus any spaces or special characters, along with an
        integral customer ID, all for storage by a main frame;  Developed
        ISAPI Extension employing ODBC data access and Thread
        Synchronization as model for heavily trafficked pages--used thread
        synchronization to put waiting threads to sleep so that they take no
        processor time, enabling application to run faster and handle a
        heavier load.

1/1999- Chief Technology Officer: Dutyfreezone.com.
12/2000 Overseer of all technical and customer service departments,
        including, Web Hosting, Web Masters, Network Engineering, etc;
        Created and Implemented a Customer Rewards program that allowed the
        redemption of points for merchandise; Personally conceived of and
        developed a Customer Service/Help Desk Application utilizing IVR
        Technology; Worked to develop Branding Standards to ensure
        distinction in establishing market equity;
        Developed XML containers for data needing to be in a neutral format
        and developed XSL and CSS Style Sheets to transform the data,
        depending on the client; Led development of Portal Application
        employing MS Commerce Server; Coded Client-Side Scripts (JavaScript)
        for validation, cross-browser compatibility, and DHTML; Personally
        coded and integrated several Real-Time online payment systems into N-
        Tier, E-commerce site, utilizing CGI (via "C"), COM, and ASP;
        Implemented HTTPS (SSL) for on-line payment systems via the purchase
        and configuration of digital certificates; Presently authoring
        application that will unify multinational accounting system via MTS
        Transactional COM/DCOM; Coded and discreetly integrated business
        rules into company's Web Site (e.g. territorial restrictions on
        merchandise sales, Customs Regulations, etc.)  via COM and ASP;
        Initiated the internationalization of site, by porting it to several
        languages; Lead team in the development of analogous site for mobile
        devices; Personally eliminated numerous bugs in site's shopping cart
        via line by line analysis of ASP code; Conversion of ASP pages to
        JSP and Servlets on SCO Unix in anticipation of integration of site
        into Java based enterprise (use of JDBC and DB2 for data access);
        created Java Bean to evaluate credit card numbers prior to
        submission to on-line credit card authorization service and EJB to
        integrate accounting functionality; Developed database redundancy
        system as back up for transmission of sales ordering information,
        currently dependant on email; Responsible for the conception and
        coding of system to automate the regular generation of prearranged,
        repetitive sales orders and to automatically pick up and process
        order requests received by email; Responsible for ongoing database
        development and support for Company's Web Site, via creation of
        Tables, Views, Stored Procedures, and Triggers on MS SQL Server and
        Oracle Databases; Conceived of and coded company’s Customer Service
        and Help Desk Application.

        Non-Technical Responsibilities: Currently creating sales
        presentation for company’s franchise program.







                                  Education

        University of Miami: Coral Gables, Florida. Elected to the National

        Honor Society of Phi Kappa Phi.
        GPA: 4.0
        Major: Mathematics
        Minor: Chemistry

        Miami Dade Community College: Focused on science and
        mathematics.
        GPA: 4.0


                                  INTERESTS

Either involved in or enjoy: golf, basketball, professional sports,
science, writing, and poetry.




                                 References

Furnished upon request.

